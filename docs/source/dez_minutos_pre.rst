.. _modulo_dez_zero:

.. include:: special.rst

Funcionalidades Prim√°rias
=========================

Vamos nos concentrar no Python 3, em especial no `Brython`_
que √© uma vers√£o que executa dentro do navegador.

Python como uma calculadora
---------------------------
Python √© como se fosse uma calculadora mais avan√ßada. Voce pode operar
dois n√∫meros usando ‚Äú:red:`+`‚Äù, ‚Äú:red:`-`‚Äù, ‚Äú:red:`/`‚Äù ou ‚Äú:red:`*`‚Äù ( multiplica√ß√£o).

.. raw:: html

  <div id="dojo_pre_0"></div>
  <script type="text/python">
      from ScriptWidget import ScriptBuilder
      sw2 = ScriptBuilder("dojo_pre.py", height=100, index="0.0", title="dojo preliminar")
  </script>


Usando a Mem√≥ria
-----------------

Em uma calculdora comum voc√™ pode salvar um n√∫mero na mem√≥ria e depois recuperar.
No Python, voc√™ pode usar qualquer nome para designar a mem√≥ria. Voc√™ usa ‚Äú:red:`=`‚Äù
para guardar algo num nome que fica antes do igual. Depois usa o nome para recuperar
o valor apontado.

.. raw:: html

  <div id="dojo_pre_1"></div>

Mem√≥ria Como Uma Lista
----------------------

Voc√™ tamb√©m pode usar uma mem√≥ria maior criando uma lista de valores.
Voc√™ pode criar uma lista impl√≠cita usando :red:`[`  e :red:`]`.
Tamb√©m pode ter um objeto lista criando com :red:`list()`.
Voc√™ pode usar no par√¢metro uma lista impl√≠cita ou um objeto intervalo.
O  objeto intervalo √© criado com :red:`range()`.
Se tiver s√≥ um par√¢metro, significa intervalo de zero at√© aquele n√∫mero, exclusive :red:`range(fim)`.
Se tiver dois √© o in√≠cio e o fim do intervalo :red:`range(inicio, fim)`
Se tiver tr√™s, o √∫ltimo diz a raz√£o de quanto pula na sequ√™ncia :red:`range(inicio, fim, pulo)`

.. raw:: html

  <div id="dojo_pre_2"></div>

Usando listas
--------------

As lista podem ser percorridas para se aproveitar cada item da lista.
Uma maneira √© usando o comando  :red:`for`.
No :red:`for` voce usa um intervalo ou uma lista e nomeia o item da vez:

:red:`for` item_da_vez :red:`in` nome_da_lista_ou_intervalo :red:`:`
    <faz alguma coisa aqui>

Voc√™ tamb√©m pode criar uma lista dinamicamente da forma impl√≠cita:

:red:`[` item_da_vez :red:`for` item_da_vez :red:`in` nome_da_lista_ou_intervalo :red:`]`

.. raw:: html

  <div id="dojo_pre_3"></div>

Propriedades das Listas
-----------------------

Cada item de uma lista pode ser acessado pelo √≠ndice de sua posi√ß√£o nela.
Os itens guardados em uma lista podem ser acessados usando  :red:`[]`.
O n√∫mero colocado entre chaves √© a posi√ß√£o na lista come√ßando por zero.
Nos exemplos abaixo temos outras facilidades de acesso a uma lista.

.. raw:: html

  <div id="dojo_pre_3_1"></div>

Usando o Navegador para Criar Conte√∫do
--------------------------------------
Brython_ quer dizer Browser-Python, ou seja, um Python que interage como o navegador.
No **Brython** voc√™ tem objetos especiais para acessar e modificar coisas no navegador.
No navegador, partes podem ser identificadas por um nome e o Brython usa este nome
para interagir com esta parte. O pacote **browser** pode ser importado para uso com:

:red:`from`  browser :red:`import` document

Por exemplo, bem aqui embaixo est√° uma parte que tem
o nome **um_texto**. No c√≥digo vamos identificar esta parte e escrever um texo ali.

.. raw:: html

  <div id="um_texto"></div></br>
  <div id="dojo_pre_4"></div>

Desenhando com o Brython
------------------------

Podemos desenhar no navegador usando um padr√£o SVG_ (Scalable Vector Graphics).
O pacote **browser** contem tambem o objeto svg que pode ser importado para uso com:

:red:`from`  browser :red:`import` svg

O comando svg do pacote svg (:red:`svg.svg`) cria uma tela onde voc√™ pode desenhar usando este padr√£o.
O operador :red:`<=` significa adicionar algo na tela ou mesmo adicionar um objeto dentro de outro.
Vamos desenhar coisas dentro de uma parte que est√° bem aqui em baixo chamada **um_desenho**.
Tente desenhar um boneco de palitos usando alguns dos comandos apresentados.

.. raw:: html

  <div id="um_desenho" style="min-height:200px;"></div></br>
  <div id="dojo_pre_5"></div>


Desafio do Arco Iris
--------------------------------
Use um comando for para desenhar as cores do arco iris com ret√¢ngulos.
Use a parte abaixo chamada **arco_iris**. Veja a imagem exemplo abaixo.
Um desafio maior seria desenhar o arco-iris usando o comando svg.path üåà.

.. image:: _static/iris.png

.. raw:: html

  <div id="arco_iris" style="min-height:200px;"></div></br>
  <div id="dojo_pre_6"></div>


Desafio do Quadro de Bandeirinhas
---------------------------------
`Alfredo Volpi`_ foi um artista brasileiro que gostava de pintar bandeirinhas.
Use um comando for para desenhar bandeirinhas de v√°rias cores.
Use a parte abaixo chamada **volpi**. Veja a imagem exemplo abaixo.
Voc√™ pode usar o comando :red:`choice` do pacote :red:`random` para sortear uma cor
diferente para cada bandeirinha.

.. image:: _static/volpi.png

.. raw:: html

  <div id="volpi" style="min-height:200px;"></div></br>
  <div id="dojo_pre_7"></div>


.. note::
   Voc√™ tamb√©m pode tentar resolver algo no dojo inicial: :ref:`modulo_dojo_zero`

.. _Brython: https://www.brython.info
.. _SVG: https://www.devmedia.com.br/introducao-ao-svg-scalable-vector-graphics/27280
.. _Alfredo Volpi: https://www.wikiart.org/pt/alfredo-volpi/