.. _modulo_tipo:

Tipos na Linguagem Python
============================

Um conceito central do Python √© que todos os valores s√£o caracterizados por um tipo.
A tipagem forte significa que o tipo de um objeto n√£o muda de forma inesperada.
Uma string contendo apenas d√≠gitos n√£o se torna magicamente um n√∫mero,
como pode acontecer em linguagens de tipagem fraca como JavaScript e Perl.
Cada mudan√ßa de tipo requer uma convers√£o de tipo expl√≠cita (aka casting).

Outra ideia interessante no Python √© o que √© conhecido como *duck typing* ou tipagem do pato.
Este modelo de tipagem n√£o exige uma correspondencia absoluta entre os tipos de valores para
se usar as capacidades do tipo. Ou seja, podemos fazer um nome apontar para valores com tipos
semelhantes e o c√≥digo vai funcionar. Se nada como um pato, anda como um pato e grasna como
um pato ent√£o podemos considerar que √© um pato.

.. image:: _static/duck_type.jpg

Os tipos da linguagem Python


.. image:: _static/tipos.svg


.. code-block:: python

    tom = "um gato" # aqui o nome tom foi colocado para identificar o texto -um gato-
    jerry = "um rato" # aqui jerry indentifica o texto -um rato-
    num_bichos = 2 # onome num_bichos identifica o valor 2
    print("O desenho tem ", num_bichos, 'personagens: ' tom, "e ", jerry)
    # O texto impresso ser√°: -O desenho tem 2 personagens: um gato e um rato-

A express√£o *tom = "um gato"* quer dizer: use o nome *tom* para se referenciar ao texto *um gato*.
Diferentemente do uso em matem√°tica o s√≠mbolo *=* n√£o quer dizer igualdade.
No Python, o s√≠mbolo igual (**=**) quer dizer: atribua ao nome *tom* o valor *um gato*.
Em todo lugar que voc√™ colocar o nome tom, o Python vai substituir pelo seu valor *um gato*.
Funciona como na comunica√ß√£o internet, onde voc√™ usa o emoji üòÄ e o leitor entende que voc√™ na verdade
escreveu: *isto √© engra√ßado*.
A express√£o *<um nome> = <um valor>* no Python √© chamada de atribui√ß√£o.
Com ela declaramos que doravante este nome representa este valor indicado.

.. note::
    √â importante ressaltar que um nome s√≥ poder√° ser usado no programa se antes ele foi atribu√≠do a um valor.

Existe umas regras de boas maneiras para escolher e escrever um nome em Python.
Estas regras foram definidas pela `Python Software Foundation <https://www.python.org/psf/>`_
em um documento chamado `PEP8 <https://peps.python.org/pep-0008/>`_.

Em sua maior parte os nomes devem ser escritos em letras min√∫sculas com as palavras separadas
pelo caracter *sublinhado(_)* por exemplo: *meu_gato*. Se o nome for se referir a uma constante,
isto √©, se o seu valor nunca ser√° trocado em todo o programa, ent√£o todas as letras ser√£o em caixa alta.
Por exemplo *PT_BR = "Portugu√™s do Brasil"*. Caso voc√™ v√° definir um tipo novo que voc√™ criou,
a norma √© usar o **PascalCase** ou **UpperCamelCase**, com todas as palavras grudadas e come√ßadas em caixa alta.
Por exemplo, a palavra *class* em Python √© usada para criar um tipo novo: *class GatoFrajola: <continua..>*

.. raw:: html

  <div id="nomes_e_valores"></div>
  <script type="text/python">
      from ScriptWidget import ScriptWidget
      sw2 = ScriptWidget("nomes_e_valores.py","nomes_e_valores", height=400, index="1.1", title="nomes e valores")
  </script>


.. moduleauthor:: Carlo Oliveira <carlo@nce.ufrj.br>

.. note::
   Procure ser cooperativo com a sua equipe.
